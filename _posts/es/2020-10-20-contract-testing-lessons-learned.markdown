---
layout: post
title:  "Lecciones aprendidas sobre Contract Testing"
date:   2020-10-09 8:00:00
author: jessica
lang: es
categories: testing, software quality, QA
tags: testing, calidad, software quality, QA, contract testing, consumer-driven contract testing, consumer driven contract testing, provider-driven contract testing, provider driven contract testing
header-image: 2020-10-20-contract-testing/header.jpg
---
A lo largo de varios posts, hemos ido viendo c√≥mo a consecuencia de la evoluci√≥n de las arquitecturas de las aplicaciones surgen nuevas necesidades en el √°mbito del testing. Nos hemos centrado en una concreta: tan importante como testear las funcionalidades en _consumer_ y _producer_ de forma independiente lo es asegurar que [la interacci√≥n entre ambos es correcta](https://blog.arima.eu/es/2020/09/03/contract-testing.html){:target="_blank"}. Hemos visto que tenemos a nuestro alcance **Contract Testing**, con [diferentes enfoques y herramientas](https://blog.arima.eu/es/2020/10/09/contract-testing-approach.html){:target="_blank"} que nos permiten abordar esta necesidad en concreto. Adem√°s utilizando el enfoque **producer driven** y [**Spring Cloud Contract**](https://spring.io/projects/spring-cloud-contract){:target="_blank"} hemos [llevado a la pr√°ctica](//TODO){{:target="_blank"}} todo lo aprendido.

Estaba pensando en c√≥mo terminar esta serie de posts, con una recopilaci√≥n de lecciones aprendidas... Algo as√≠ como un minipost resumiendo todo lo que hemos visto hasta ahora en cuatro o cinco titulares.  
Haciendo este ejercicio de reflexi√≥n, he recordado que en mi proceso de aprendizaje hubo una lecci√≥n que destac√≥ frente al resto. Puede que haya gente para la que resulte obvia pero seguro que hay alguien por ah√≠ que puede meterse en el mismo callej√≥n que me met√≠ yo en su momento... As√≠ que, para ese "alguien" üòâ aqu√≠ mi granito de arena:
> Hacer Contract Testing **no** te exime de hacer Unit Testing o Integration Testing.

Vale, ya se que esto es lo que pone en todos los sitios, que no estoy diciendo nada nuevo.... pero bueno, yo estuve tentada de hacerlo... quiz√°s t√∫ que me lees tambi√©n.... y ya sab√©is mi mantra: _materializar para entender_ üòä.  
Vamos a partir del ejemplo en el que hemos utilizado Spring Cloud Contract. Ya sabemos de qu√© va y controlamos el ejemplo. Viendo los tests del _consumer_, podr√≠amos pensar...

üí° Ey! Ser√≠a genial tener las casu√≠sticas que necesito para mi l√≥gica representadas en el stub as√≠ no me ahorrar√≠a el test unitario donde las tengo mockeadas

¬°Qu√© buena idea!

ü§î Ya pero el _producer_ no tiene por qu√© conocer mis casu√≠sticas y es quien ha creado el contrato.
  
Es verdad‚Ä¶.. ¬øc√≥mo se me habr√° ocurrido? 

üí° Wait! ¬°Lo que necesito son consumer-driven contracts! 

Puedo crear los contratos desde el _consumer_ con la informaci√≥n que necesito y hacer que los contratos est√©n disponibles en el _producer_ mediante pull-request (por ejemplo). Como los tests del _producer_ son autogenerados no se va a enterar... ¬°Perfecto!¬°Manos a la obra!

Si echamos un vistazo a los tests del _consumer_ vemos que b√°sicamente queremos probar tres situaciones: cuando la duraci√≥n de los worklogs es de 8 horas, de m√°s de 8 horas y de menos de 8 horas.

Generamos por tanto los nuevos contratos y los dejamos accesibles por el _producer_. A continuaci√≥n mostramos un fragmento de c√≥mo podr√≠a ser (el c√≥digo completo est√° en [Github](//TODO){:target="_blank"}).

#### worklogsForWorkerAndDay.yaml
```yml
//TODO
```

En √©l hemos generado las 3 situaciones que quer√≠amos. Es hora de generar el stub en el _producer_. Hacemos `./mvnw clean install` y vemos que aunque hemos cambiado el contrato con Spring Cloud Contract se autogeneran los tests, as√≠ que todo va seg√∫n lo previsto y no tenemos que tocar nada del _producer_.

Como ya tenemos accesible el stub con las casu√≠sticas generadas, en el _consumer_ podr√≠amos borrar nuestros tests unitarios e implementarlos haciendo llamadas al stub directamente. El c√≥digo quedar√≠a

```Java
//TODO
```
¬°Genial! Todo queda mucho m√°s limpio ¬ø¬°C√≥mo no se me habr√° ocurrido antes!?

Pero ¬øqu√© suceder√≠a si modificamos la l√≥gica de nuestro consumer? 
Por ejemplo, supongamos que contemplamos la casu√≠stica del verano, cuando en lugar de jornadas de 8 horas tenemos jornadas de 7 horas, o sin m√°s, que hemos decidido tener jornadas de 7 horas de ahora en adelante. Para introducir este cambio, como m√≠nimo tendr√≠amos que: 
1. Modificar el contrato y a√±adir m√°s casu√≠sticas para que en funci√≥n de los par√°metros de entrada nos devuelva otros datos
1. Hacer llegar al producer el contrato (por ejemplo pull-request)
1. Regenerar elementos del producer como los tests y el stub (`./mvnw clean install`)
1. Modiicar los tests en el consumer para a√±adir las nuevas casu√≠sticas

Estamos modificando el contrato cuando en realidad no ha habido cambios en el ‚Äúacuerdo‚Äù consumer-producer.Estamos utilizando las bondades de Spring Cloud Contract como un m√©todo de generaci√≥n de datos ‚Äúmock‚Äù para nuestra l√≥gica de negocio... Algo no suena bien. Si no hubi√©semos hecho el cambio, √∫nicamente tendr√≠amos que hacer el paso 4. Parece que no ha sido tan buena idea ¬øno?
¬øPoder se puede? S√≠. Sin embargo, un gran poder conlleva una gran responsabilidad... y **que se pueda no quiere decir que se deba**. 

Con esto llegamos a la conclusi√≥n que hemos destacado al principio: Contract testing no sustituye ni a los tests unitarios, ni a los de integraci√≥n, ni otros tests que podamos tener en nuestros proyectos. Contract testing es una herramienta m√°s, un complemento a los anteriores cuyo objetivo NO ES verificar/asegurar el buen funcionamiento de la l√≥gica de negocio (ni de consumidores ni de proveedores) para eso est√°n los test unitarios o de integraci√≥n de cada uno de ellos. Su objetivo ES asegurar que existen acuerdos entre consumer y producer para  por los acuerdos que hacen que la interacci√≥n entre consumer y producer sea correcta.
 
La verdad es que somos propensos a descubrir una herramienta y si nos gusta y nos encaja utilizarla de forma indiscriminada. Como hemos visto, cuando estamos aplic√°ndolos podr√≠a parecernos que podr√≠amos llegar a prescindir de nuestros test unitarios, pero si seguimos indagando, vemos que ese que nos parec√≠a el descubrimiento del d√≠a no es tan buena idea, todo lo contrario.

# Lecciones aprendidas
Bueno pues ya llega el momento del resumen. Vamos a ver qu√© hemos aprendido a lo largo de estos posts.

- Tenemos una herramienta m√°s que nos sirve para el testeo de aplicaciones de (micro)servicios y que no aplica en aplicaciones monol√≠ticas.

- Como con el resto de tipos/t√©cnicas de tests, hay que buscar el equilibrio y tener claro el objetivo de los mismos, en este caso: testear el acuerdo (contrato o pacto) entre consumer y producer (ni m√°s ni menos) y no utilizarlos de forma indiscriminada.

- En proyectos donde el producer sea transversal a varios consumers (cuyo desarrollo no est√© acoplado entre s√≠)  y/o p√∫blico parece m√°s apropiada la aproximaci√≥n o el enfoque producer driven, donde es el producer quien define c√≥mo ser√° el acuerdo a cumplir en la comunicaci√≥n.

- En proyectos donde el producer no tiene raz√≥n de ser sin el consumer, y cuyo desarrollos est√° acoplados, parece m√°s apropiado el enfoque de consumer driven, donde ser√° el (o los) consumer(s) quienes indicar√°n al producer sus necesidades estableciendo el acuerdo a cumplir en la comunicaci√≥n

- C√≥mo implementar/organizar el testing depender√° del enfoque seleccionado y de la naturaleza del proyecto: no existe una receta √∫nica y universal para hacer buen testing.
